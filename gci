#!/bin/bash
#
#   gci - globus command interface
#
#   This command assists in activation of the NCAR-CISL managed
#   Globus endpoints and then forwards the provided subcommand
#   to globus. It also facilitates running on a Cheyenne batch
#   node.
#
#   Author:         Brian Vanderwende
#   Last Revised:   11:11, 25 Jun 2021
#

function clean_up {
    CMDSTAT=$?
    rm -f $BTMP
    exit $CMDSTAT
}

# Exit upon signal (so we don't resubmit SSH command)
trap clean_up SIGHUP SIGINT SIGQUIT SIGTERM

# Do we need help?
function usage {
cat << EOF
Usage: $0 [OPTIONS] COMMAND [SOURCE] DESTINATION

This utility provides a convenient interface for transferring files between
CISL Globus endpoints. An attempt will be made to auto-authenticate using a
long-lived certificate file. These are InCommon Certificates and can be
acquired at http://support.ucar.edu and then prepared using the gcert utility.
All requests utilize the Globus CLI to schedule and conduct transfers.

Any globus CLI subcommand can be given to this command. Any argument that
specifies an endpoint:path format or simply a path with a known file system
prefix will cause gci to obtain the endpoint ID and activate for you.

gci options:
    --force-auth        force gci to re-authenticate endpoints regardless of status
    --cert-lifetime N   authenticate endpoints for N hours (0<N<=720, default=24)
    --debug             output command with endpoint formatting and exit
    --silent            only output text from the globus command (except errors)

Specifying Endpoints

gci allows you to specify endpoints in two different ways. You may:

1.  Provide the full path for each file - the endpoint will be detected by gci based
    on the path (e.g., /glade/campaign is Campaign Storage). If an unknown absolute
    path is provided, an error will occur.
2.  Explicitly specify the endpoint before the path, separated by a colon. The lowest
    common level will be specified if a relative path is given.

    endpoints:common root
    ---------------------
    glade:/glade
    campaign:/glade/campaign
    share:/glade/p/datashare
    quasar:/gpfs/gpfs0/archive
    id:/path/on/any/filesystem

EOF
}

# Set some defaults
export LIFETIME=24 AFORCE= VMODE=true DEBUG=

while [[ $# -gt 0 ]]; do
    case $1 in
        --gcihelp)
            usage
            exit 0
            ;;
        --debug)
            export DEBUG=true
            ;;
        --cert-lifetime)
            if [[ $KEY == *=* ]]; then
                LIFETIME=${KEY#*=}
            else
                LIFETIME=$2
                shift
            fi

            if [[ $LIFETIME < 1 ]] || [[ $LIFETIME > 720 ]]; then
                echo "Error: custom lifetime should be 0 < LIFETIME <= 720 hours"
                exit 200
            fi
            ;;
        --force-auth)
            AFORCE=true
            ;;
        --silent)
            VMODE=
            ;;
        *)
            GARGS+=("$1")
            ;;
        esac
    shift
done

# If in batch mode, store stdin in a file
if [[ " $@ " == *" --batch "* ]]; then
    MYTMP=${TMPDIR:-fakepath}

    if [[ -d /glade/scratch/$USER ]]; then
        export TMPDIR=/glade/scratch/$USER
    fi
    
    export BTMP=$(mktemp ${TMPDIR:-/tmp/}/.gcibatch.XXXXXX)

    # Make sure stdin was actually used
    if [[ $(readlink -f /dev/stdin) =~ /(glade|tmp|$MYTMP)/* ]] ; then
        cat > $BTMP
    fi
fi

# Call main script locally or on login node
export GCIUTIL=$(cd "$(dirname "$0")"; pwd)/util

if [[ $NCAR_HOST == cheyenne ]] && [[ -n $PBS_JOBID ]]; then
    SNODE=$(shuf -i 1-6 -n 1)
    LN=$SNODE SSHSTAT=255
    RCMD="  export BTMP=$BTMP TMPDIR=$TMPDIR VMODE=$VMODE AFORCE=$AFORCE DEBUG=$DEBUG   \
            LIFETIME=$LIFETIME; cd $(pwd); $GCIUTIL/main ${GARGS[@]}"

    while [[ $SSHSTAT -eq 255 ]]; do
        ssh cheyenne${LN}.ib0 "/bin/bash -c \"$RCMD\""
        SSHSTAT=$? LN=$((LN + 1))

        if [[ $LN -gt 6 ]]; then
            LN=1
        elif [[ $LN -eq $SNODE ]]; then
            break
        fi
    done

    if [[ $SSHSTAT -eq 255 ]]; then
        echo "Error: could not connect to a login node; transfer aborted"
        exit 255
    fi

    exit $SSHSTAT
else
    $GCIUTIL/main "${GARGS[@]}"
fi

clean_up
